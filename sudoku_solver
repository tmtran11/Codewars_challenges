# solve a 9x9 sudoku in O(n^2) time
def sudoku(puzzle):
  d = {}
  for x in range(9):
    for y in range(9):
      if puzzle[x][y]==0:
        d[(x,y)] = list(range(1,10))
        for r in puzzle[x]:
          if not r == 0 and r in d[(x,y)]:
            del d[(x,y)][d[(x,y)].index(r)]
        for c in puzzle:
          if not c[y] == 0 and c[y] in d[(x,y)]:
            del d[(x,y)][d[(x,y)].index(c[y])]
        for r in range((x//3)*3,(x//3+1)*3):
          for c in range((y//3)*3,(y//3+1)*3):
            if not puzzle[r][c] == 0 and puzzle[r][c] in d[(x,y)]:
              del d[(x,y)][d[(x,y)].index(puzzle[r][c])]
  while True:
    for x in range(9):
      for y in range(9):
        if (x,y) in d:
          if len(d[(x,y)])==1:
            puzzle[x][y]=d[(x,y)][0]
            del d[(x,y)]
            for n,r in enumerate(puzzle[x]):
              if (x,n) in d and puzzle[x][y] in d[(x,n)]:
                del d[(x,n)][d[(x,n)].index(puzzle[x][y])]
            for n,c in enumerate(puzzle):
              if (n,y) in d and puzzle[x][y] in d[(n,y)]:
                del d[(n,y)][d[(n,y)].index(puzzle[x][y])]
            for r in range((x//3)*3,(x//3+1)*3):
              for c in range((y//3)*3,(y//3+1)*3):
                if (r,c) in d and puzzle[x][y] in d[(r,c)]:
                  del d[(r,c)][d[(r,c)].index(puzzle[x][y])]
    if len(d.keys())==0:
      return puzzle
