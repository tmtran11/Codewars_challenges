"""
What might not be so trivial is instead to get a decent breadcrumb from your current url. For this kata, your purpose is to create a function that takes a url, strips the first part (labelling it always HOME) and then builds it making each element but the last a <a> element linking to the relevant path; last has to be a <span> element getting the active class.

All elements need to be turned to uppercase and separated by a separator, given as the second parameter of the function; the last element can terminate in some common extension like .html, .htm, .php or .asp; if the name of the last element is index.something, you treat it as if it wasn't there, sending users automatically to the upper level folder.

A few examples can be more helpful than thousands of words of explanation, so here you have them:

generate_bc("mysite.com/pictures/holidays.html", " : ") == '<a href="/">HOME</a> : <a href="/pictures/">PICTURES</a> : <span class="active">HOLIDAYS</span>'
generate_bc("www.codewars.com/users/GiacomoSorbi", " / ") == '<a href="/">HOME</a> / <a href="/users/">USERS</a> / <span class="active">GIACOMOSORBI</span>'
generate_bc("www.microsoft.com/docs/index.htm", " * ") == '<a href="/">HOME</a> * <span class="active">DOCS</span>'
Seems easy enough?

Well, probably not so much, but we have one last extra rule: if one element (other than the root/home) is longer than 30 characters, you have to shorten it, acronymizing it (i.e.: taking just the initials of every word); url will be always given in the format this-is-an-element-of-the-url and you should ignore words in this array while acronymizing: ["the","of","in","from","by","with","and", "or", "for", "to", "at", "a"]; a url composed of more words separated by - and equal or less than 30 characters long needs to be just uppercased with hyphens replaced by spaces.

Ignore anchors (www.url.com#lameAnchorExample) and parameters (www.url.com?codewars=rocks&pippi=rocksToo) when present.
"""

def generate_bc(url, separator):

    print(url)
    
    no = ['the','of','in','from','by','with','and', 'or', 'for', 'to', 'at', 'a']
    
    u = url.split('/')
    copy = url.split('/')
    if url.find('http')!=-1: 
        del u[:2]
        del copy[:2]
    if url[-1]=='/': 
        del u[-1]
        del copy[-1]
    
    if u[-1].find('.htm')!=-1 or u[-1].find('.php')!=-1 or u[-1].find('.asp')!=-1:
        if u[-1].find('index')!=-1:
            del u[-1]
        else: 
            u[-1] = u[-1].split('.')[0]
            
    print(u)
            
    for n,s in enumerate(u):
        if n==0:
            if len(u)>1:
                u[0] = '<a href="/">HOME</a>'
            else: 
                u[0] = '<span class="active">HOME</span>'
        else:
            temp = [s]
            if s.find('?')!= -1:
                temp = s.split('?')[0]
            if s.find('#')!= -1:
                temp = s.split('#')[0]
            if len(''.join(temp))>30:
                temp = [x for x in ''.join(temp).split('-') if not x in no or len(''.join(temp).split('-'))==1]
                s1 = ''.join([x[0] if len(temp)>1 else x for x in temp])
            else:
                s1 = ''.join(' ' if x=='-' else x for x in ''.join(temp))
            
            if n!=len(u)-1: 
                if len(u)>3 and n>1:
                    st = []
                    for i in range(1,n):
                        st.append(copy[i])
                    u[n] = '<a href="/'+'/'.join(st)+'/'+s+'/">'+s1.upper()+'</a>'
                else: 
                    u[n] = '<a href="/'+s+'/">'+s1.upper()+'</a>'
            elif n==len(u)-1: 
                u[n] = '<span class="active">'+s1.upper()+'</span>'
            
    return separator.join(u)
