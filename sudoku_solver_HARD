"""
There are several difficulty of sudoku games, we can estimate the difficulty of a sudoku game based on how many cells are given 
of the 81 cells of the game.

Easy sudoku generally have over 32 givens
Medium sudoku have around 30–32 givens
Hard sudoku have around 28–30 givens
Very Hard sudoku have less than 28 givens
Note: The minimum of givens required to create a unique (with no multiple solutions) sudoku game is 17.

A hard sudoku game means that at start no cell will have a single candidates and thus require guessing and trial and error. 
A very hard will have several layers of multiple candidates for any empty cell.

--> Write a function that solves sudoku puzzles of ANY DIFFICULTY. The function will take a sudoku grid and it should return a 9x9 array
with the proper answer for the puzzle.
--> It should also raise an error in cases of: invalid grid (not 9x9, cell with values not in the range 1~9); multiple solutions for 
the same puzzle or the puzzle is unsolvable.
"""

# Using local search and recursion to find all possible solutions
# Using Constraint Programming to prune the search pace

import copy
solution = []
search = []
index = []
# store variable locally to avoid mutable varible while using recursion

# main
def sudoku_solver(puzzle):
  global solution
  solution = []
  if len(puzzle)!=9:
    raise ValueError("not 9x9")
  for x in range(9):
    if len(puzzle[x])!=9:
      raise ValueError("not 9x9")
  for x in range(9):
    for y in range(9):
      if puzzle[x][y] > 9:
        raise ValueError("cell with values not in the range 1~9")
  solver(puzzle)
  if len(solution)==0:
    raise ValueError("No solution")
  if len(solution)>1:
    raise ValueError("Too many solutions")
  return solution[0]

# solver
def solver(puzzle):
  #dictionary of possible int for each empty cell
  d = {}
  
  #find cell with maximum constraints
  min_i = 10 
  next_i = -1 
  
  # return puzzle if all cell fill
  not_done = False
  
  # Using constraint programming, chech row, col, diag
  for x in range(9):
    for y in range(9):
      if puzzle[x][y]==0:
        not_done = True
        d[(x,y)] = list(range(1,10))
        for r in puzzle[x]:
          if not r == 0 and r in d[(x,y)]:
            del d[(x,y)][d[(x,y)].index(r)]
        for c in puzzle:
          if not c[y] == 0 and c[y] in d[(x,y)]:
            del d[(x,y)][d[(x,y)].index(c[y])]
        for r in range((x//3)*3,(x//3+1)*3):
          for c in range((y//3)*3,(y//3+1)*3):
            if not puzzle[r][c] == 0 and puzzle[r][c] in d[(x,y)]:
              del d[(x,y)][d[(x,y)].index(puzzle[r][c])]
        if len(d[(x,y)]) < min_i:
          min_i = len(d[(x,y)])
          next_i = (x,y)
        if len(d[(x,y)]) == 0:
          return None
  if not not_done:
    return puzzle
  
  # avoid reference to wrong object
  temp = [[0]*9]*9
  for r in range(9):
      temp[r] = puzzle[r][:]
      
  # stack variable into global variable to retain information for recursion
  # because recursion search by variable of maximum constraint, the search pace is pruned!
  search.append(temp)
  index.append(next_i)
  for x in d[index[-1]]:
    puzzle = search[-1]
    puzzle[index[-1][0]][index[-1][1]] = x
    # recursion
    s = solver(puzzle)
    if not s == None:
      temp = [[0]*9]*9
      for r in range(9):
        temp[r] = s[r][:]
      if check_solution(temp):
        solution.append(temp)
  del search[-1]
  del index[-1]

# check validity of solution
def check_solution(puzzle):
  d = {}
  for x in range(9):
    for y in range(9):
      d[(x,y)] = list(range(1,10))
      for r in puzzle[x]:
        if not r == 0 and r in d[(x,y)]:
          del d[(x,y)][d[(x,y)].index(r)]
      if len(d[(x,y)]) != 0:
        return False
      d[(x,y)] = list(range(1,10))
      for c in puzzle:
        if not c[y] == 0 and c[y] in d[(x,y)]:
          del d[(x,y)][d[(x,y)].index(c[y])]
      if len(d[(x,y)]) != 0:
        return False
      d[(x,y)] = list(range(1,10))
      for r in range((x//3)*3,(x//3+1)*3):
        for c in range((y//3)*3,(y//3+1)*3):
          if not puzzle[r][c] == 0 and puzzle[r][c] in d[(x,y)]:
            del d[(x,y)][d[(x,y)].index(puzzle[r][c])]
      if len(d[(x,y)]) != 0:
        return False
  return True
